_mainHero.Rect = _mainHero.Rect with { X = _mainHero.Rect.X + (int)_mainHero.Velocity.X };
            intersections = GetIntersectingTilesHorizontal(_mainHero.Rect);

            foreach (var rect in intersections)
            {
                // handle collisions if the tile position exists in the tile map layer.
                if (_level1.Collisions.TryGetValue(new Vector2(rect.X, rect.Y), out int _val))
                {
                    // create temp rect to handle collisions (not necessary, you can optimize!)
                    Rectangle collision = new(
                        rect.X * Tilesize,
                        rect.Y * Tilesize,
                        Tilesize,
                        Tilesize
                    );

                    // handle collisions based on the direction the player is moving
                    if (_mainHero.Velocity.X > 0.0f)
                    {
                        _mainHero.Rect = _mainHero.Rect with { X = collision.Left - _mainHero.Rect.Width };
                    }
                    else if (_mainHero.Velocity.X < 0.0f)
                    {
                        _mainHero.Rect = _mainHero.Rect with { X = collision.Right };
                    }
                }
            }

            // same as horizontal collisions

            _mainHero.Rect = _mainHero.Rect with { Y = _mainHero.Rect.Y + (int)_mainHero.Velocity.Y };
            intersections = GetIntersectingTilesVertical(_mainHero.Rect);

            _mainHero.IsOnGround = false;

            foreach (var rect in intersections)
            {
                if (_level1.Collisions.TryGetValue(new Vector2(rect.X, rect.Y), out int _val))
                {
                    Rectangle collision = new(
                        rect.X * Tilesize,
                        rect.Y * Tilesize,
                        Tilesize,
                        Tilesize
                    );

                    if (_mainHero.Velocity.Y > 0.0f)
                    {
                        _mainHero.Rect = _mainHero.Rect with { Y = collision.Top - _mainHero.Rect.Height };
                        _mainHero.IsOnGround = true;
                        _mainHero.Velocity = _mainHero.Velocity with { Y = 0.0f };
                    }
                    else if (_mainHero.Velocity.Y < 0.0f)
                    {
                        _mainHero.Rect = _mainHero.Rect with { Y = collision.Bottom };
                    }
                }
            }